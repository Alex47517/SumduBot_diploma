const mysql = require('mysql');
const express = require('express');
const TelegramBot = require('node-telegram-bot-api');
const token = 'TOKEN';
const port = 7001;
const bot = new TelegramBot(token);
const chatId = process.argv[2];
const msgId = process.argv[3];
let bet = process.argv[4];
let disable_start_timer = false;
let deck = ['6 ‚ô†', '7 ‚ô†', '8 ‚ô†', '9 ‚ô†', '10 ‚ô†', '–í ‚ô†', '–î ‚ô†', '–ö ‚ô†', '–¢ ‚ô†',
             '6 ‚ô£', '7 ‚ô£', '8 ‚ô£', '9 ‚ô£', '10 ‚ô£', '–í ‚ô£', '–î ‚ô£', '–ö ‚ô£', '–¢ ‚ô£',
             '6 ‚ô•', '7 ‚ô•', '8 ‚ô•', '9 ‚ô•', '10 ‚ô•', '–í ‚ô•', '–î ‚ô•', '–ö ‚ô•', '–¢ ‚ô•',
             '6 ‚ô¶', '7 ‚ô¶', '8 ‚ô¶', '9 ‚ô¶', '10 ‚ô¶', '–í ‚ô¶', '–î ‚ô¶', '–ö ‚ô¶', '–¢ ‚ô¶'];
var sql = mysql.createConnection({
    host     : 'HOST',
    user     : 'USER',
    password : 'PASSWORD',
    database : 'elitglobal'
});
sql.connect();
const app = express();
// -- CONFIG --
let start_time = 60;


let players = {};
players.db = [];
players.gameinfo = [];

//=========================
// –û–û–ü
//=========================

async function startTimer(start_time) {
    start_time -= 5;
    let opt = {
        chat_id: chatId,
        message_id: msgId,
        parse_mode: 'html',
        reply_markup: JSON.stringify({
            inline_keyboard: [[
                {text: 'üéÆ –ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ –≥—Ä–∏', url: 'https://t.me/Sumdu_bot?start=durak'}
            ],
                [
                    {text: 'üìú –ü—Ä–∞–≤–∏–ª–∞ –≥—Ä–∏', url: 'https://telegra.ph/Pravila-dlya-gri-UNO-10-19'}
                ]]
        })
    }
    let players_text = '\n';
    players.db.forEach(el => {
        players_text += el.nick+'\n';
    });
    if (start_time <= 0) {
        let opt = {
            chat_id: chatId,
            message_id: msgId,
            parse_mode: 'html',
        }
        if (players.db.length < 1) {
            await bot.editMessageText('‚ö† <b>[DURAK] –ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ—á–∞—Ç–∏ –≥—Ä—É!</b> \n' +
                '\n' +
                '<em>–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –≥—Ä–∞–≤—Ü—ñ–≤</em>', {chat_id: chatId, message_id: msgId, parse_mode: 'html',});
            setTimeout(function () {
                process.exit(-1);
            }, 1000);
        }
        if (players.db.length < 2) {
            console.log('ID: '+players.db[0].id);
            sql.query("SELECT * FROM users WHERE id = ?", [players.db[0].id], async function (error, results, fields) {
                let pl = results[0];
                let new_balance = Number(pl.balance)+Number(bet);
                sql.query("UPDATE users SET balance = ? WHERE id = " + players.db[0].id, [new_balance], async function (error, results, fields) {
                    await bot.editMessageText('‚ö† <b>[UNO] –ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ—á–∞—Ç–∏ –≥—Ä—É!</b> \n' +
                        '\n' +
                        '<em>–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –≥—Ä–∞–≤—Ü—ñ–≤</em>', {chat_id: chatId, message_id: msgId, parse_mode: 'html',});
                    setTimeout(function () {
                        process.exit(-1);
                    }, 1000);
                });
            });
        } else {
            await bot.editMessageText('üß™ <b>[DURAK] –ì—Ä–∞ –ø–æ—á–∞–ª–∞—Å—è!</b> \n' +
                '<b>–ì—Ä–∞–≤—Ü—ñ:</b>'+players_text+'' +
                '\n' +
                '‚ô¶ –°—Ç–∞–≤–∫–∞: <b>'+bet+'üí∞</b>\n' +
                'üéÅ –ù–∞–≥–æ—Ä–æ–¥–∞ –∑–∞ –ø–µ—Ä–µ–º–æ–≥—É: <b>'+bank+'üí∞</b>\n', {chat_id: chatId, message_id: msgId, parse_mode: 'html',});
            //—Ä–æ–∑–¥–∞—á–∞ –∫–∞—Ä—Ç–æ–∫
            players.db.forEach(function callback(player, i, array) {
                players.gameinfo[i].cards = [];
                for (let l = 0; l < 6; l++) {
                    players.gameinfo[i].cards[l] = getRandomCard();
                }
                console.log('START CARDS '+players.db[i].nick+' [MSG: '+players.gameinfo[i].message+']: '+players.gameinfo[i].cards+'\n');
            });
            active_card = getRandomCard(true);
            console.log('active_card: '+active_card);
            newAction('–ü–æ—á–Ω–µ–º–æ –≥—Ä—É!');
            newAction('–£—Å—ñ–º –≥—Ä–∞–≤—Ü—è–º –≤–∏–¥–∞–Ω–æ –ø–æ 6 –∫–∞—Ä—Ç–æ–∫');
            newAction('–ü–æ—á–∞—Ç–∫–æ–≤–∞ –∫–∞—Ä—Ç–∞: '+active_card);
            restartTimer(move, false);
            await updateGame();
            disable_start_timer = true;
        }
    }
    if (!disable_start_timer) {
        bot.editMessageText('‚è≥ <b>[DURAK] –ì—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞!</b> \n' +
            '‚ô¶ –°—Ç–∞–≤–∫–∞: <b>'+bet+'üí∞</b>\n' +
            players_text + '\n' +
            '<em>–û—á—ñ–∫—É–≤–∞–Ω–Ω—è –≥—Ä–∞–≤—Ü—ñ–≤ - ' + start_time + ' —Å–µ–∫.</em>', opt);
        setTimeout(startTimer, 5000, start_time);
    }
}



class game {
    constructor(game_id, players, ) {
        sql.query("SELECT * FROM users WHERE tg_id = ?", [user_id], async function (error, results, fields) {

        });
    }
}

app.post(`/bot${token}`, (req, res) => {
    bot.processUpdate(req.body);
    res.sendStatus(200);
});
app.listen(port, () => {
    console.log(`Express server is listening on ${port}`);
    let opt = {
        chat_id: chatId,
        message_id: msgId,
        parse_mode: 'html',
        reply_markup: JSON.stringify({
            inline_keyboard: [[
                {text: 'üéÆ –ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ –≥—Ä–∏', url: 'https://t.me/Sumdu_bot?start=durak'}
            ],
                [
                    {text: 'üìú –ü—Ä–∞–≤–∏–ª–∞ –≥—Ä–∏', url: 'https://telegra.ph/Pravila-dlya-gri-UNO-10-19'}
                ]]
        })
    }
    bot.editMessageText('‚è≥ <b>[UNO] –ì—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞!</b> \n' +
        '\n' +
        '‚ô¶ –°—Ç–∞–≤–∫–∞: <b>'+bet+'üí∞</b>\n' +
        '\n' +
        '<em>–û—á—ñ–∫—É–≤–∞–Ω–Ω—è –≥—Ä–∞–≤—Ü—ñ–≤ - '+start_time+' —Å–µ–∫.</em>', opt);
    setTimeout(startTimer, 5000, start_time);
});

bot.on('message', async msg => {
    console.log('TEST!!!!');
    let die = false;
    let cmd = msg.text.split(' ');
    if (cmd[0] === '/start' && cmd[1] === 'durak') {
        players.db.forEach(function callback(player, i, array) {
            if (players.db[i].tg_id === msg.chat.id) {
                die = true;
            }
        });
        if (!die) {
            sql.query("SELECT * FROM users WHERE tg_id = ?", [msg.from.id], async function (error, results, fields) {
                if (error) throw error;
                let player = results[0];
                if (Number(player.balance) >= Number(bet)) {
                    sql.query("UPDATE users SET balance = ? WHERE id = "+player.id, [(player.balance-bet)], async function (error, results, fields) {
                        bank += Number(bet);
                        if (error) throw error;
                        players.db.push(player);
                        let result = await bot.sendMessage(msg.chat.id, '‚è≥ –í–∏ –ø—Ä–∏—î–¥–Ω–∞–ª–∏—Å—è –¥–æ –≥—Ä–∏ –≤ "–¥—É—Ä–∞–∫". –û—á—ñ–∫—É–π—Ç–µ –ø–æ–∫–∏ –ø–æ—á–Ω–µ—Ç—å—Å—è –≥—Ä–∞. \n\n –î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –≤ —á–∞—Ç—ñ –∑–≤—ñ–¥–∫–∏ –∑–∞–ø—É—Å—Ç–∏–ª–∏ –≥—Ä—É');
                        players.gameinfo.push({message: result.message_id, cards: [], uno: false});
                    });
                } else {
                    bot.sendMessage(msg.chat.id, 'üí¢ –£ —Ç–µ–±–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤ —â–æ–± –æ–ø–ª–∞—Ç–∏—Ç–∏ —Å—Ç–∞–≤–∫—É —É —Ü—ñ–π –≥—Ä—ñ\n\n–ù–µ–æ–±—Ö—ñ–¥–Ω–æ: '+bet+'üí∞\n–ë–∞–ª–∞–Ω—Å: '+player.balance+'üí∞');
                }
            });
        } else {
            await bot.sendMessage(msg.chat.id, 'üí¢ –í–∏ –≤–∂–µ –ø—Ä–∏—î–¥–Ω–∞–Ω—ñ –¥–æ –≥—Ä–∏ –≤ uno.');
        }
    }
});