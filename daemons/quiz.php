<?php
require __DIR__.'/../config/start.php';
require __DIR__.'/../config/loader.php';
require_once __DIR__.'/../vendor/autoload.php';
set_time_limit(0); //–ó–Ω—ñ–º–∞—î–º–æ –æ–±–º–µ–∂–µ–Ω–Ω—è –ø–æ —á–∞—Å—É –Ω–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Å–∫—Ä–∏–ø—Ç—É
use api\{chat as chat, Bot as Bot, Log as Log};
use Orhanerday\OpenAi\OpenAi;
$user = new User();
$bot = new Bot($bot_token);
if(!$user->loadByID($argv[1])) die('[DAEMON/AVIATOR] User not found');
$chat = new chat($user->user['tg_id']);
$userId = $argv[1]; // ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
$theme = $argv[2]; // –¢–µ–º–∞ –≤—ñ–∫—Ç–æ—Ä–∏–Ω–∏
$question = $argv[3]; // –ù–æ–º–µ—Ä –ø–∏—Ç–∞–Ω–Ω—è
$themes = [
    1 => '–ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è',
    2 => '–º–æ–¥–µ–ª—é–≤–∞–Ω–Ω—è',
    3 => '—Ç–µ–ª–µ–∫–æ–º',
    4 => '–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞',
    5 => '–µ–ª–µ–∫—Ç—Ä–æ–Ω—ñ–∫–∞',
];
$letters = ['–ê', '–ë', '–í', '–ì'];
echo '[1:'.$user->user['nick'].'] ok!';
// –û—Ç—Ä–∏–º–∞–Ω–Ω—è ID –≤—ñ–∫—Ç–æ—Ä–∏–Ω, —è–∫—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —â–µ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–≤ –ø–æ —Ü—ñ–π —Ç–µ–º—ñ
$sql = "SELECT q.id 
        FROM quiz q 
        LEFT JOIN quizresults qr ON q.id = qr.question AND qr.user = ?
        WHERE qr.id IS NULL AND q.theme = ?";
$quizIds = R::getCol($sql, [$userId, $theme]);
if (count($quizIds) > 0) {
    $randomKey = array_rand($quizIds);
    $randomQuizId = $quizIds[$randomKey];

    $quiz = R::load('quiz', $randomQuizId); // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –æ–±'—î–∫—Ç—É –≤—ñ–∫—Ç–æ—Ä–∏–Ω–∏
    $answers = R::getAll('SELECT * FROM `quizanswers` WHERE `quiz` = ? ORDER BY `id` ASC', [$quiz['id']]);
} else {
    $chat->editMessageText('<b>üôÄ –û–≥–æ! –¢–∏ –≤—ñ–¥–ø–æ–≤—ñ–≤ –Ω–∞ —É—Å—ñ –ø–∏—Ç–∞–Ω–Ω—è –∑ –±–∞–∑–∏. –ê–ª–µ –Ω–µ –∑–∞—Å–º—É—á—É–π—Å—è, –∑–∞—Ä–∞–∑ —è –ø—Ä–∏–¥—É–º–∞—é —â–æ—Å—å –Ω–æ–≤–µ–Ω—å–∫–µ :)</b>', null, $user->LocalStorageGet('msg_id'));
    echo '[I] GPT STARTED!';
    $openai = new OpenAI(OPEN_AI_API_KEY);
    $complete = $openai->chat([
        'model' => 'gpt-4o',
        'messages' => [
            [
                "role" => "system",
                "content" => "–¢–≤–æ—î –∑–∞–≤–¥–∞–Ω–Ω—è - —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Ç–µ–æ—Ä–µ—Ç–∏—á–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è –ø–æ —Ç–µ–º—ñ: '.$themes[$theme].' –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç—É –∑ —Ä—ñ–≤–Ω–µ–º —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ 8/10. –ü—ñ—Å–ª—è —Ü—å–æ–≥–æ –ø–µ—Ä–µ–¥–∞–π –ø–∏—Ç–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü—ñ—é"
            ],
            [
                "role" => "user",
                "content" => '–°–≥–µ–Ω–µ—Ä—É–π –ø–∏—Ç–∞–Ω–Ω—è —Ç–∞ –ø–µ—Ä–µ–¥–∞–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –¢–µ–º–∞: '.$themes[$theme].'.',
            ]
        ],
        'tools' => [
            [
                'type' => 'function',
                'function' => [
                    'name' => 'generate_quiz',
                    'description' => 'Passes question to the user',
                    'parameters' => [
                        'type' => 'object',
                        'properties' => [
                            'question' => [
                                'type' => 'string',
                                'description' => '–í–∏–≥–∞–¥–∞–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è –Ω–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫—ñ–π –º–æ–≤—ñ. –º–∞—î –≤–∏–º–∞–≥–∞—Ç–∏ –≥–ª–∏–±–æ–∫–∏—Ö –∑–Ω–∞–Ω—å —É –∑–∞–¥–∞–Ω—ñ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º –æ–±–ª–∞—Å—Ç—ñ –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ. –ü–æ–¥–±–∞–π –ø—Ä–æ —Ç–µ, —â–æ–± –≤–æ–Ω–æ –Ω–µ –º—ñ—Å—Ç–∏–ª–æ —Ñ–∞–∫—Ç–∏—á–Ω–∏—Ö –ø–æ–º–∏–ª–æ–∫ —ñ –±—É–ª–æ –ª–æ–≥—ñ—á–Ω–æ –∫–æ—Ä–µ–∫—Ç–Ω–∏–º.'
                            ],
                            'incorrect_answer_option_1' => [
                                'type' => 'string',
                                'description' => '–ü–µ—Ä–µ–¥–∞–π –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å 1. –í–æ–Ω–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –¥–æ–≤–æ–ª—ñ –ª–æ–≥—ñ—á–Ω–æ—é, —â–æ–± —Å—Ç—É–¥–µ–Ω—Ç—É –¥–æ–≤–µ–ª–æ—Å—è –ø–æ–¥—É–º–∞—Ç–∏'
                            ],
                            'incorrect_answer_option_2' => [
                                'type' => 'string',
                                'description' => '–ü–µ—Ä–µ–¥–∞–π –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å 2. –í–æ–Ω–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –¥–æ–≤–æ–ª—ñ –ª–æ–≥—ñ—á–Ω–æ—é, —â–æ–± —Å—Ç—É–¥–µ–Ω—Ç—É –¥–æ–≤–µ–ª–æ—Å—è –ø–æ–¥—É–º–∞—Ç–∏'
                            ],
                            'incorrect_answer_option_3' => [
                                'type' => 'string',
                                'description' => '–ü–µ—Ä–µ–¥–∞–π –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å 3. –í–æ–Ω–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –¥–æ–≤–æ–ª—ñ –ª–æ–≥—ñ—á–Ω–æ—é, —â–æ–± —Å—Ç—É–¥–µ–Ω—Ç—É –¥–æ–≤–µ–ª–æ—Å—è –ø–æ–¥—É–º–∞—Ç–∏'
                            ],
                            '—Åorrect_answer' => [
                                'type' => 'string',
                                'description' => '–ü–µ—Ä–µ–¥–∞–π –ø—Ä–∞–≤–∏–ª—å–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è —É question'
                            ],
                        ],
                        'required' => ['question', 'incorrect_answer_option_1', 'incorrect_answer_option_2', 'incorrect_answer_option_3', '—Åorrect_answer']
                    ]
                ]
            ]
        ],
        'tool_choice' => 'auto',
        'temperature' => 1.0,
        'max_tokens' => 1000,
        'frequency_penalty' => 0,
        'presence_penalty' => 0,
    ]);
    $complete = json_decode($complete, true);
    if (!$complete['choices'][0]['message']['tool_calls'][0]['function']['name']) {
        echo "[LOG] –ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑—ñ–±—Ä–∞—Ç–∏ —Ç–µ–∫—Å—Ç –∑–∞ –≤–∫–∞–∑–∞–Ω–∏–º —Ñ–æ—Ä–º–∞—Ç–æ–º.\n";
        $keyboard[0][0]['text'] = 'üîú –î–∞–ª—ñ üîú';
        $keyboard[0][0]['callback_data'] = 'quiz_next_'.$question;
        $chat->editMessageText('<b>üí¢ –°—Ö–æ–∂–µ, —â–æ –≤ –Ω–∞—Å –≤–∏–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞. –î–∞–≤–∞–π –¥–æ–º–æ–≤–∏–º–æ—Å—è —Ç–∞–∫: –Ø –¥–∞–º —Ç–æ–±—ñ 100üí∞, –∞–ª–µ —Ç–∏ –Ω–∞–¥—ñ—à–ª–µ—à @alex47517 —Ü–µ–π —Ç–µ–∫—Å—Ç:</b>

<code>[ERR] Failed to parse ChatGPT response</code>', ['inline_keyboard' => $keyboard], $user->LocalStorageGet('msg_id')); die();
    } else {
        $function_request = json_decode($complete['choices'][0]['message']['tool_calls'][0]['function']['arguments'], true);
        $quiz = R::dispense('quiz');
        $quiz->question = $function_request['question'];
        $quiz->theme = $theme;
        R::store($quiz);
        Log::admin('QUIZ/SUCCESS-GPT', ' | <a href="tg://user?id='.$user->user['tg_id'].'">'.$user->user['nick'].'</a>: <code>'.var_export($function_request, true).'</code>');
        $is_correct = false;
        $answers = [];
        $correctAnswerIndex = rand(0, 3); //–í–∏–ø–∞–¥–∫–æ–≤–æ –æ–±–∏—Ä–∞—î–º–æ –ª—ñ—Ç–µ—Ä—É –≤—ñ–¥ (–ê –¥–æ –ì) –¥–ª—è –ø—ñ–¥—Å—Ç–∞–≤–∫–∏ –≤ –Ω–µ—ó –ø—Ä–∞–≤–∏–ª—å–Ω–æ—ó –ª—ñ—Ç–µ—Ä–∏
        $incorrectIndex = 1;
        for ($i=0;$i<4;$i++) {
            if ($i == $correctAnswerIndex) {
                $answers[] = $function_request['—Åorrect_answer'];
            } else {
                $answers[] = $function_request['incorrect_answer_option_'.$incorrectIndex];
                $incorrectIndex++;
            }
        }
        foreach ($answers as $key => $ans) {
            $answer = R::dispense('quizanswers');
            $answer->quiz = $quiz['id'];
            $answer->answer = $ans;
            if ($key == $correctAnswerIndex) { $answer->correct = 1; $is_correct = true; }
            else $answer->correct = 0;
            R::store($answer);
        }
        $answers = R::getAll('SELECT * FROM `quizanswers` WHERE `quiz` = ? ORDER BY `id` ASC', [$quiz['id']]);
        if (!$answers[3]['answer'] or !$is_correct) {
            R::trash($quiz);
            $keyboard[0][0]['text'] = 'üîú –î–∞–ª—ñ üîú';
            $keyboard[0][0]['callback_data'] = 'quiz_next_'.$question;
            $chat->editMessageText('<b>üí¢ –°—Ö–æ–∂–µ, —â–æ –≤ –Ω–∞—Å –≤–∏–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞. –î–∞–≤–∞–π –¥–æ–º–æ–≤–∏–º–æ—Å—è —Ç–∞–∫: –Ø –∑–∞—Ä–∞—Ö—É—é —Ü–µ –ø–∏—Ç–∞–Ω–Ω—è, –∞–ª–µ —Ç–∏ —Å–ø—Ä–æ–±—É—î—à —â–µ —Ä–∞–∑:</b>

<code>[ERR] Failed to parse ChatGPT response</code>
<code>'.$text.'</code>', ['inline_keyboard' => $keyboard], $user->LocalStorageGet('msg_id')); die();
        }
    }
}
$answers_text = '';
var_dump($answers);
foreach ($answers as $key => $answer) {
    $answers_text .= '<b>'.$letters[$key].')</b> '.$answer['answer'].'
';
    if ($answer['correct']) {
        $correct_answer = $letters[$key].') '.$answer['answer'];
    }
    $keyboard[0][$key]['text'] = $letters[$key];
    $keyboard[0][$key]['callback_data'] = 'quiz_answer_'.$quiz['id'].'_'.$key.'_'.($question+1);
}
$chat->editMessageText('<b>‚ùì '.$question.'/10 ></b> '.mb_convert_case($themes[$theme], MB_CASE_TITLE, "UTF-8").' [‚è∞ 45 —Å–µ–∫.]

'.$quiz['question'].'
<em>= –û–±–µ—Ä–∏ 1 –≤—ñ–¥–ø–æ–≤—ñ–¥—å: =</em>
'.$answers_text, ['inline_keyboard' => $keyboard], $user->LocalStorageGet('msg_id'));
sleep(45);
$keyboard = null;
$keyboard[0][0]['text'] = 'üîú –î–∞–ª—ñ üîú';
$keyboard[0][0]['callback_data'] = 'quiz_answer_'.$quiz['id'].'_-1_'.($question+1);
$chat->editMessageText('<b>‚ùì '.$question.'/10 ></b> '.mb_convert_case($themes[$theme], MB_CASE_TITLE, "UTF-8").'

>> <b>–ß–ê–° –í–ò–ß–ï–†–ü–ê–ù–û!</b>

–ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å:
<em>'.$correct_answer.'</em>', ['inline_keyboard' => $keyboard], $user->LocalStorageGet('msg_id'));